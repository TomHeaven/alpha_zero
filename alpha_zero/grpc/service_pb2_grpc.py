# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class CentralServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.inference = channel.unary_unary(
            '/alpha_zero.CentralService/inference',
            request_serializer=service__pb2.InferenceRequest.SerializeToString,
            response_deserializer=service__pb2.InferenceResponse.FromString,
        )
        self.update_weights = channel.unary_unary(
            '/alpha_zero.CentralService/update_weights',
            request_serializer=service__pb2.UpdateWeightsRequest.SerializeToString,
            response_deserializer=service__pb2.UpdateWeightsResponse.FromString,
        )


class CentralServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def inference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_weights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CentralServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'inference': grpc.unary_unary_rpc_method_handler(
            servicer.inference,
            request_deserializer=service__pb2.InferenceRequest.FromString,
            response_serializer=service__pb2.InferenceResponse.SerializeToString,
        ),
        'update_weights': grpc.unary_unary_rpc_method_handler(
            servicer.update_weights,
            request_deserializer=service__pb2.UpdateWeightsRequest.FromString,
            response_serializer=service__pb2.UpdateWeightsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler('alpha_zero.CentralService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CentralService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def inference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alpha_zero.CentralService/inference',
            service__pb2.InferenceRequest.SerializeToString,
            service__pb2.InferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def update_weights(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alpha_zero.CentralService/update_weights',
            service__pb2.UpdateWeightsRequest.SerializeToString,
            service__pb2.UpdateWeightsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
